rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isVerified() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.verification_status == 'verified';
    }

    // Profiles collection
    match /profiles/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false; // Profiles should not be deleted
    }

    // Listings collection
    match /listings/{listingId} {
      allow read: if true;
      allow create: if isAuthenticated() && isVerified();
      allow update: if isAuthenticated() && 
        (resource.data.seller_id == request.auth.uid || isVerified());
      allow delete: if isAuthenticated() && resource.data.seller_id == request.auth.uid;
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        (resource.data.sender_id == request.auth.uid || 
         resource.data.receiver_id == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.sender_id == request.auth.uid;
      allow update: if false; // Messages should not be updated
      allow delete: if false; // Messages should not be deleted
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if false; // Conversations should not be deleted
    }

    // University themes collection
    match /university_themes/{themeId} {
      allow read: if true;
      allow write: if false; // Only admin can modify themes
    }

    // Listing categories collection
    match /listing_categories/{categoryId} {
      allow read: if true;
      allow write: if false; // Only admin can modify categories
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() && isVerified();
      allow update: if isAuthenticated() && 
        resource.data.reviewer_id == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.reviewer_id == request.auth.uid;
    }

    // Favorites collection
    match /favorites/{favoriteId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      // Only admins can update role/status
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    // Accommodation bookings
    match /accommodation_bookings/{bookingId} {
      allow read: if request.auth != null && (
        resource.data.customerId == request.auth.uid ||
        resource.data.landlordId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin']
      );
      allow create: if request.auth != null && (
        request.resource.data.customerId == request.auth.uid
      ) && !existsOverlap(request.resource.data.propertyId, request.resource.data.checkIn, request.resource.data.checkOut);
      allow update: if request.auth != null && (
        resource.data.customerId == request.auth.uid ||
        resource.data.landlordId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin']
      );
      allow delete: if request.auth != null && (
        resource.data.customerId == request.auth.uid ||
        resource.data.landlordId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin']
      );
    }

    // Audit logs - only admins can write
    match /auditLogs/{logId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
      allow update, delete: if false;
    }

    // Notifications - only admins or system can write
    match /notifications/{notifId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
      allow update, delete: if false;
    }

    // Products, accommodations, etc. (example: only owner or admin can update/delete)
    match /accommodations/{accomId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        resource.data.seller.id == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin']
      );
    }

    // Helper function for booking overlap (pseudo, not supported in Firestore rules, but shown for intent)
    function existsOverlap(propertyId, checkIn, checkOut) {
      // Firestore rules cannot query for overlapping dates directly, so this must be enforced in backend
      return false;
    }
  }
} 